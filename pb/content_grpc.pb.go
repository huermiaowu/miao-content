// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.3.0
// - protoc             v3.19.4
// source: content.proto

package pb

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

const (
	Content_Ping_FullMethodName          = "/content.content/Ping"
	Content_CreateDynamic_FullMethodName = "/content.content/CreateDynamic"
	Content_UpdateDynamic_FullMethodName = "/content.content/UpdateDynamic"
	Content_GetDynamic_FullMethodName    = "/content.content/GetDynamic"
)

// ContentClient is the client API for Content service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type ContentClient interface {
	Ping(ctx context.Context, in *PingReq, opts ...grpc.CallOption) (*PingResp, error)
	CreateDynamic(ctx context.Context, in *CreateDynamicReq, opts ...grpc.CallOption) (*CreateDynamicResp, error)
	UpdateDynamic(ctx context.Context, in *UpdateDynamicReq, opts ...grpc.CallOption) (*UpdateDynamicResp, error)
	GetDynamic(ctx context.Context, in *GetDynamicReq, opts ...grpc.CallOption) (*GetDynamicResp, error)
}

type contentClient struct {
	cc grpc.ClientConnInterface
}

func NewContentClient(cc grpc.ClientConnInterface) ContentClient {
	return &contentClient{cc}
}

func (c *contentClient) Ping(ctx context.Context, in *PingReq, opts ...grpc.CallOption) (*PingResp, error) {
	out := new(PingResp)
	err := c.cc.Invoke(ctx, Content_Ping_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *contentClient) CreateDynamic(ctx context.Context, in *CreateDynamicReq, opts ...grpc.CallOption) (*CreateDynamicResp, error) {
	out := new(CreateDynamicResp)
	err := c.cc.Invoke(ctx, Content_CreateDynamic_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *contentClient) UpdateDynamic(ctx context.Context, in *UpdateDynamicReq, opts ...grpc.CallOption) (*UpdateDynamicResp, error) {
	out := new(UpdateDynamicResp)
	err := c.cc.Invoke(ctx, Content_UpdateDynamic_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *contentClient) GetDynamic(ctx context.Context, in *GetDynamicReq, opts ...grpc.CallOption) (*GetDynamicResp, error) {
	out := new(GetDynamicResp)
	err := c.cc.Invoke(ctx, Content_GetDynamic_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// ContentServer is the server API for Content service.
// All implementations must embed UnimplementedContentServer
// for forward compatibility
type ContentServer interface {
	Ping(context.Context, *PingReq) (*PingResp, error)
	CreateDynamic(context.Context, *CreateDynamicReq) (*CreateDynamicResp, error)
	UpdateDynamic(context.Context, *UpdateDynamicReq) (*UpdateDynamicResp, error)
	GetDynamic(context.Context, *GetDynamicReq) (*GetDynamicResp, error)
	mustEmbedUnimplementedContentServer()
}

// UnimplementedContentServer must be embedded to have forward compatible implementations.
type UnimplementedContentServer struct {
}

func (UnimplementedContentServer) Ping(context.Context, *PingReq) (*PingResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Ping not implemented")
}
func (UnimplementedContentServer) CreateDynamic(context.Context, *CreateDynamicReq) (*CreateDynamicResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateDynamic not implemented")
}
func (UnimplementedContentServer) UpdateDynamic(context.Context, *UpdateDynamicReq) (*UpdateDynamicResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateDynamic not implemented")
}
func (UnimplementedContentServer) GetDynamic(context.Context, *GetDynamicReq) (*GetDynamicResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetDynamic not implemented")
}
func (UnimplementedContentServer) mustEmbedUnimplementedContentServer() {}

// UnsafeContentServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to ContentServer will
// result in compilation errors.
type UnsafeContentServer interface {
	mustEmbedUnimplementedContentServer()
}

func RegisterContentServer(s grpc.ServiceRegistrar, srv ContentServer) {
	s.RegisterService(&Content_ServiceDesc, srv)
}

func _Content_Ping_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(PingReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ContentServer).Ping(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Content_Ping_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ContentServer).Ping(ctx, req.(*PingReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Content_CreateDynamic_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateDynamicReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ContentServer).CreateDynamic(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Content_CreateDynamic_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ContentServer).CreateDynamic(ctx, req.(*CreateDynamicReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Content_UpdateDynamic_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateDynamicReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ContentServer).UpdateDynamic(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Content_UpdateDynamic_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ContentServer).UpdateDynamic(ctx, req.(*UpdateDynamicReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Content_GetDynamic_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetDynamicReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ContentServer).GetDynamic(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Content_GetDynamic_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ContentServer).GetDynamic(ctx, req.(*GetDynamicReq))
	}
	return interceptor(ctx, in, info, handler)
}

// Content_ServiceDesc is the grpc.ServiceDesc for Content service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var Content_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "content.content",
	HandlerType: (*ContentServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Ping",
			Handler:    _Content_Ping_Handler,
		},
		{
			MethodName: "CreateDynamic",
			Handler:    _Content_CreateDynamic_Handler,
		},
		{
			MethodName: "UpdateDynamic",
			Handler:    _Content_UpdateDynamic_Handler,
		},
		{
			MethodName: "GetDynamic",
			Handler:    _Content_GetDynamic_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "content.proto",
}
